name: File Change Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  update-embeddings:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to allow arbitrary SHAs

    - name: Get Changed Files and Directories
      id: changed-files
      run: |
          echo "Getting changes between ${{ github.event.before }} and ${{ github.event.after }}..."

          # Gather raw lists
          ADDED_FILES=$(git diff --name-only --diff-filter=A ${{ github.event.before }} ${{ github.event.after }})
          MODIFIED_FILES=$(git diff --name-only --diff-filter=M ${{ github.event.before }} ${{ github.event.after }})
          DELETED_FILES=$(git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.event.after }})

          # Handle renames as moves
          RENAMED_FILES_RAW=$(git diff --name-status --diff-filter=R ${{ github.event.before }} ${{ github.event.after }})
          MOVED_FILES=""
          while IFS=$'\t' read -r status old new; do
            [ -n "$old" ] && [ -n "$new" ] && \
              MOVED_FILES="$MOVED_FILES"$'\n'"$old -> $new"
          done <<< "$(echo "$RENAMED_FILES_RAW" | grep '^R' | sed 's/^R[0-9]*\t//')"

          # Detect directory adds/removals
          CREATED_DIRECTORIES=$(comm -13 <(git ls-tree -r -d --name-only ${{ github.event.before }} | sort) <(git ls-tree -r -d --name-only ${{ github.event.after }} | sort))
          DELETED_DIRECTORIES=$(comm -23 <(git ls-tree -r -d --name-only ${{ github.event.before }} | sort) <(git ls-tree -r -d --name-only ${{ github.event.after }} | sort))

          # Emit *compact* JSON arrays with jq -c
          echo "created_files_json=$(jq -R -s -c 'map(select(length>0))' <<<"$ADDED_FILES")"  >> $GITHUB_OUTPUT
          echo "updated_files_json=$(jq -R -s -c 'map(select(length>0))' <<<"$MODIFIED_FILES")" >> $GITHUB_OUTPUT
          echo "deleted_files_json=$(jq -R -s -c 'map(select(length>0))' <<<"$DELETED_FILES")" >> $GITHUB_OUTPUT
          echo "moved_files_json=$(jq -R -s -c 'map(select(length>0))' <<<"$MOVED_FILES")" >> $GITHUB_OUTPUT
          echo "created_directories_json=$(jq -R -s -c 'map(select(length>0))' <<<"$CREATED_DIRECTORIES")" >> $GITHUB_OUTPUT
          echo "deleted_directories_json=$(jq -R -s -c 'map(select(length>0))' <<<"$DELETED_DIRECTORIES")" >> $GITHUB_OUTPUT

          # Flag whether there were any changes
          TOTAL=$(echo -e "$ADDED_FILES\n$MODIFIED_FILES\n$DELETED_FILES\n$MOVED_FILES\n$CREATED_DIRECTORIES\n$DELETED_DIRECTORIES" | sed '/^$/d' | wc -l)
          echo "has_changes=$([ "$TOTAL" -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
    - name: Update Embeddings
      if: steps.changed-files.outputs.has_changes == 'true'
      env:
        MCP_SERVER_URL: http://143.198.109.85:8000
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        echo "Sending batch update to MCP Server..."
        
        JSON_PAYLOAD=$(cat <<EOF
        {
          "repo_name": "${{ env.REPO_NAME }}",
          "created_files": ${{ steps.changed-files.outputs.created_files_json }},
          "updated_files": ${{ steps.changed-files.outputs.updated_files_json }},
          "deleted_files": ${{ steps.changed-files.outputs.deleted_files_json }},
          "moved_files": ${{ steps.changed-files.outputs.moved_files_json }},
          "created_directories": ${{ steps.changed-files.outputs.created_directories_json }},
          "deleted_directories": ${{ steps.changed-files.outputs.deleted_directories_json }}
        }
        EOF
        )

        echo "Payload:"
        echo "$JSON_PAYLOAD"

        response=$(curl -s -w "%{http_code}" -X POST "${{ env.MCP_SERVER_URL }}/batch_update_embeddings" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD")
        
        http_code="${response: -3}"
        if [ "$http_code" -eq 200 ]; then
          echo "✅ Successfully sent batch update."
          echo "Response: ${response%???}"
        else
          echo "❌ Failed to send batch update (HTTP $http_code)"
          echo "Response: ${response%???}"
          exit 1
        fi

    - name: No changes detected
      if: steps.changed-files.outputs.has_changes == 'false'
      run: |
        echo "No relevant file changes detected. Skipping embedding updates." 