name: File Change Workflow

on:
  push:
    # Run only if these s-ignore:
      - '**/.*'    # Ignore any file/folder starting with a dot
      - '.*/**'    # Ignore any file/folder inside a dotfolder
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**'
    paths-ignore:
      - '**/.*'
      - '.*/**'

jobs:
  check-file-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c*de.*        use*: .ctions/checkout@v4

      - name: Get changed files
        id: files
        run: |
          echo "Created files:"
          git diff --name-only --diff-filter=A ${{ github.event.before }} ${{ github.sha }}
          echo "Deleted files:"
          git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.sha }}
          echo "Modified files:"
          git diff --name-only --diff-filter=M ${{ github.event.before }} ${{ github.sha }}
          echo "Renamed files:"
          git diff --name-only --diff-filter=R ${{ github.event.before }} ${{ github.sha }}

  update-embeddings:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to compare changes

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files_ignore: |
          .*
          .*/*
          .*/**/**

    - name: Update embeddings for changed files
      if: steps.changed-files.outputs.any_changed == 'true'
      env:
        MCP_SERVER_URL: https://service-name-261986073576.us-west1.run.app
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        echo "Repository: ${REPO_NAME}"
        echo "Server URL: ${MCP_SERVER_URL}"
        echo "Changed files count: ${{ steps.changed-files.outputs.all_changed_files_count }}"
        echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
        echo "Created files: ${{ steps.changed-files.outputs.created_files }}"
        echo "Deleted files: ${{ steps.changed-files.outputs.deleted_files }}"
        
        # Check if server URL is set
        if [ -z "${MCP_SERVER_URL}" ]; then
          echo "Error: MCP_SERVER_URL is not set"
          exit 1
        fi
        
        # Track success/failure counts
        success_count=0
        failure_count=0
        
        # Process each changed file
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "Processing file: $file"
          
          # Check if file was deleted
          if [[ "${{ steps.changed-files.outputs.deleted_files }}" == *"$file"* ]]; then
            echo "File deleted: $file - Removing embeddings"
            response=$(curl -s -w "%{http_code}" -X POST "${MCP_SERVER_URL}/delete_specific_file_embeddings" \
              -H "Content-Type: application/json" \
              -d "{\"repo_name\": \"${REPO_NAME}\", \"file_path\": \"$file\"}")
            
            http_code="${response: -3}"
            if [ "$http_code" -eq 200 ]; then
              echo "‚úÖ Successfully deleted embeddings for $file"
              ((success_count++))
            else
              echo "‚ùå Failed to delete embeddings for $file (HTTP $http_code)"
              echo "Response: ${response%???}"
              ((failure_count++))
            fi
          else
            if [[ "${{ steps.changed-files.outputs.created_files }}" == *"$file"* ]]; then
              echo "File created: $file - Creating embeddings"
            else
              echo "File modified: $file - Updating embeddings"
            fi
            response=$(curl -s -w "%{http_code}" -X POST "${MCP_SERVER_URL}/insert_specific_file_embeddings" \
              -H "Content-Type: application/json" \
              -d "{\"repo_name\": \"${REPO_NAME}\", \"file_path\": \"$file\"}")
            
            http_code="${response: -3}"
            if [ "$http_code" -Some"
              ((success_count++))
            else
              echo "‚ùå Failed to update embeddings for $file (HTTP $http_code)"
              echo "Response: ${response%???}"
              ((failure_count++))
            fi
          fi
          
          # Add a small delay to avoid overwhelming the server
          sleep 1
        done
        
        echo "üìä Summary:"
        echo "  - Successfully processed: $success_count files"
        echo "  - Failed to process: $failure_count files"
        echo "  - Created files: ${{ steps.changed-files.outputs.created_files }}"
        echo "  - Deleted files: ${{ steps.changed-files.outputs.deleted_files }}"
        echo "  - Total files: ${{ steps.changed-files.outputs.all_changed_files_count }}"
        
        # Exit with error if any failures occurred
        if [ $failure_count -gt 0 ]; then
          echo "‚ùå ($failure_count) of ${{ steps.changed-files.outputs.all_changed_files_count }} files failed to process"
          exit 1
        else
          echo "‚úÖ All files processed successfully"
          exit 0
        fi

    - name: No changes detected
      if: steps.changed-files.outputs.any_changed != 'true'
      run: |
        echo "No relevant file changes detected. Skipping embedding updates." 