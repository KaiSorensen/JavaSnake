name: File Change Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  update-embeddings:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to compare changes

    - name: Get Changed Files
      id: changed-files
      run: |
        # Fetch the full history to ensure we can diff against the 'before' SHA
        git fetch --prune --unshallow

        # Get lists of added, modified, and deleted files
        ADDED_FILES=$(git diff --name-only --diff-filter=A ${{ github.event.before }} ${{ github.event.after }})
        MODIFIED_FILES=$(git diff --name-only --diff-filter=M ${{ github.event.before }} ${{ github.event.after }})
        DELETED_FILES=$(git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.event.after }})
        
        # Get renamed files and parse them
        RENAMED_FILES_RAW=$(git diff --name-status --diff-filter=R ${{ github.event.before }} ${{ github.event.after }})
        
        # Combine Added and Modified files
        CREATED_OR_UPDATED_FILES=$(echo -e "$ADDED_FILES\n$MODIFIED_FILES" | sed '/^$/d')

        # Process renames: add old path to deleted, new path to created/updated
        while IFS=$'\t' read -r status old_path new_path; do
          DELETED_FILES=$(echo -e "$DELETED_FILES\n$old_path" | sed '/^$/d')
          CREATED_OR_UPDATED_FILES=$(echo -e "$CREATED_OR_UPDATED_FILES\n$new_path" | sed '/^$/d')
        done <<< "$(echo "$RENAMED_FILES_RAW" | sed 's/^R[0-9]*\t//')"

        # Set outputs as JSON arrays
        echo "created_updated_json=$(echo "$CREATED_OR_UPDATED_FILES" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT
        echo "deleted_json=$(echo "$DELETED_FILES" | jq -R . | jq -s .)" >> $GITHUB_OUTPUT
        echo "has_changes=$(if [ -n "$CREATED_OR_UPDATED_FILES" ] || [ -n "$DELETED_FILES" ]; then echo "true"; else echo "false"; fi)" >> $GITHUB_OUTPUT

    - name: Update Embeddings
      if: steps.changed-files.outputs.has_changes == 'true'
      env:
        MCP_SERVER_URL: http://143.198.109.85:8000
        REPO_NAME: ${{ github.event.repository.name }}
      run: |
        echo "Sending batch update to MCP Server..."
        
        JSON_PAYLOAD=$(cat <<EOF
        {
          "repo_name": "${{ env.REPO_NAME }}",
          "created_or_updated_files": ${{ steps.changed-files.outputs.created_updated_json }},
          "deleted_files": ${{ steps.changed-files.outputs.deleted_json }}
        }
        EOF
        )

        echo "Payload:"
        echo "$JSON_PAYLOAD"

        response=$(curl -s -w "%{http_code}" -X POST "${{ env.MCP_SERVER_URL }}/batch_update_embeddings" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD")
        
        http_code="${response: -3}"
        if [ "$http_code" -eq 200 ]; then
          echo "✅ Successfully sent batch update."
          echo "Response: ${response%???}"
        else
          echo "❌ Failed to send batch update (HTTP $http_code)"
          echo "Response: ${response%???}"
          exit 1
        fi

    - name: No changes detected
      if: steps.changed-files.outputs.has_changes == 'false'
      run: |
        echo "No relevant file changes detected. Skipping embedding updates." 