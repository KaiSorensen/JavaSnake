name: Update MCP Embeddings on File Changes

on:
  push:
    # Trigger on all file changes except dotfiles / dot‑folders
    paths-ignore:
      - '**/.*'
      - '.*/**'
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**/.*'
      - '.*/**'

jobs:
  update-embeddings:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      # Configure via repository secrets
      MCP_SERVER_URL: ${{ secrets.MCP_SERVER_URL }}
      REPO_NAME: ${{ github.event.repository.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0      # full history so PR & push diffs work reliably

      - name: Define diff range (base ↔︎ head)
        id: vars
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BASE_SHA=${{ github.event.pull_request.base.sha }}" >> "$GITHUB_OUTPUT"
            echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "BASE_SHA=${{ github.event.before }}" >> "$GITHUB_OUTPUT"
            echo "HEAD_SHA=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Collect changed files
        id: collect
        shell: bash
        run: |
          BASE=${{ steps.vars.outputs.BASE_SHA }}
          HEAD=${{ steps.vars.outputs.HEAD_SHA }}

          mapfile -t CREATED   < <(git diff --name-only --diff-filter=A "$BASE" "$HEAD")
          mapfile -t MODIFIED  < <(git diff --name-only --diff-filter=M "$BASE" "$HEAD")
          mapfile -t DELETED   < <(git diff --name-only --diff-filter=D "$BASE" "$HEAD")
          mapfile -t RENAMED   < <(git diff --name-status --diff-filter=R "$BASE" "$HEAD" | awk '{print $2}')

          printf '%s\n' "${CREATED[@]}"  > created_files.txt
          printf '%s\n' "${MODIFIED[@]}" > modified_files.txt
          printf '%s\n' "${DELETED[@]}"  > deleted_files.txt
          printf '%s\n' "${RENAMED[@]}"  > renamed_files.txt

      - name: Update embeddings via MCP API
        shell: bash
        run: |
          set -eo pipefail

          success=0
          failure=0

          # Skip dotfiles / files inside dot‑folders
          is_ignored() {
            [[ "$1" =~ (^|/)\. ]]
          }

          call_endpoint() {
            local file=$1
            local action=$2

            if [[ "$action" == "deleted" ]]; then
              endpoint="delete_specific_file_embeddings"
            else
              endpoint="insert_specific_file_embeddings"
            fi

            # Build JSON payload safely
            payload=$(jq -n --arg repo "$REPO_NAME" --arg path "$file" '{repo_name:$repo, file_path:$path}')

            code=$(curl -s -o /dev/null -w "%{http_code}" \
                    -X POST "${MCP_SERVER_URL}/${endpoint}" \
                    -H "Content-Type: application/json" \
                    -d "$payload")

            if [[ "$code" == "200" ]]; then
              echo "✅ $action $file"
              ((success++))
            else
              echo "❌ $action $file (HTTP $code)"
              ((failure++))
            fi
          }

          process_list() {
            local list=$1
            local action=$2
            while IFS= read -r file; do
              [[ -z "$file" ]] && continue
              if is_ignored "$file"; then
                echo "⚠️  Skipping dot‑file $file"
                continue
              fi
              call_endpoint "$file" "$action"
              sleep 1     # polite back‑off
            done < "$list"
          }

          process_list created_files.txt  created
          process_list modified_files.txt modified
          process_list renamed_files.txt  renamed
          process_list deleted_files.txt  deleted

          echo "----"
          echo "Succeeded: $success"
          echo "Failed:    $failure"

          [[ "$failure" -eq 0 ]]
