name: File Change Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  update-embeddings:
    runs-on: ubuntu-latest

    # URL for your MCP server comes from repository secrets so it doesn't leak in logs
    env:
      MCP_SERVER_URL: ${{ secrets.MCP_SERVER_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # need full history so we can diff arbitrary SHAs

      - name: Ensure jq is available (compact JSON builder)
        run: sudo apt-get update -y && sudo apt-get install -y jq

      # One step → detect changes *and* post them.  Keeps everything in‑one‑place and easy to read.
      - name: Detect changes and update embeddings
        id: diff-send
        env:
          BEFORE: ${{ github.event.before }}
          AFTER:  ${{ github.event.after }}
          REPO:   ${{ github.event.repository.name }}
        run: |
          set -euo pipefail
          IFS=$'\n\t'

          # ------------------------------
          # 1. Pick the two commits to diff
          # ------------------------------
          before_sha="${BEFORE:-$(git rev-parse HEAD~1)}"  # fallback for first push
          after_sha="${AFTER:-$(git rev-parse HEAD)}"

          # ------------------------------
          # 2. Capture file & directory changes
          # ------------------------------
          added=$(git diff --name-only --diff-filter=A "$before_sha" "$after_sha")
          modified=$(git diff --name-only --diff-filter=M "$before_sha" "$after_sha")
          deleted=$(git diff --name-only --diff-filter=D "$before_sha" "$after_sha")

          # Renames → "old -> new"
          moved=""
          while IFS=$'\t' read -r _ old new; do
            [[ -n "$old" && -n "$new" ]] && moved+=$'\n'"$old -> $new"
          done < <(git diff --name-status --diff-filter=R "$before_sha" "$after_sha")

          created_dirs=$(comm -13 <(git ls-tree -r -d --name-only "$before_sha" | sort) <(git ls-tree -r -d --name-only "$after_sha" | sort))
          deleted_dirs=$(comm -23 <(git ls-tree -r -d --name-only "$before_sha" | sort) <(git ls-tree -r -d --name-only "$after_sha" | sort))

          # ------------------------------
          # 3. Helper → newline list → compact JSON array (or [])
          # ------------------------------
          json_array() {
            local list="$1"
            if [[ -z "$list" || "$list" == $'\n' ]]; then
              echo '[]'
            else
              printf '%s\n' "$list" | jq -R -s -c 'split("\n") | map(select(length>0))'
            fi
          }

          created_files_json=$(json_array "$added")
          updated_files_json=$(json_array "$modified")
          deleted_files_json=$(json_array "$deleted")
          moved_files_json=$(json_array "$moved")
          created_dirs_json=$(json_array "$created_dirs")
          deleted_dirs_json=$(json_array "$deleted_dirs")

          # Quick exit if nothing changed
          total_changes=$(( $(printf '%s\n' "$added" "$modified" "$deleted" "$moved" "$created_dirs" "$deleted_dirs" | sed '/^$/d' | wc -l) ))
          if [[ "$total_changes" -eq 0 ]]; then
            echo 'No relevant file changes detected. Skipping embedding updates.'
            exit 0
          fi

          # ------------------------------
          # 4. Build JSON payload safely with jq
          # ------------------------------
          payload=$(jq -n \
            --arg repo "$REPO" \
            --argjson created_files "$created_files_json" \
            --argjson updated_files "$updated_files_json" \
            --argjson deleted_files "$deleted_files_json" \
            --argjson moved_files "$moved_files_json" \
            --argjson created_directories "$created_dirs_json" \
            --argjson deleted_directories "$deleted_dirs_json" \
            '{repo_name:$repo,
              created_files:$created_files,
              updated_files:$updated_files,
              deleted_files:$deleted_files,
              moved_files:$moved_files,
              created_directories:$created_directories,
              deleted_directories:$deleted_directories}')

          echo "Payload JSON →\n$payload"

          # ------------------------------
          # 5. POST to MCP and fail cleanly on non‑200
          # ------------------------------
          echo "MCP_SERVER_URL='http://143.198.109.85:8000'"
          status=$(curl -s -o response.txt -w '%{http_code}' \
            -X POST "$MCP_SERVER_URL/batch_update_embeddings" \
            -H 'Content-Type: application/json' \
            -d "$payload")
          cat response.txt
          if [[ "$status" != "200" ]]; then
            echo "❌ MCP server returned HTTP $status" >&2
            exit 1
          fi
          echo "✅ Embedding batch update sent successfully."
